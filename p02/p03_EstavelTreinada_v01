/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-58.52936205752952, -16.48069309590335],
          [-58.57330737002952, -17.101247170160555],
          [-58.32062182315452, -17.478882098612424],
          [-57.96905932315452, -17.656938725904308],
          [-57.77130541690452, -17.897558502926692],
          [-57.67242846377952, -18.273525077010646],
          [-57.94708666690452, -19.23060191352147],
          [-58.24371752627952, -19.71741814896459],
          [-58.29864916690452, -20.274912605306977],
          [-57.99103197940452, -20.96383809400686],
          [-58.07892260440452, -21.578107423128746],
          [-58.10089526065452, -22.230467998199895],
          [-57.41974291690452, -22.26097380469566],
          [-57.32086596377952, -21.88427321684344],
          [-57.11212572940452, -21.49635339908078],
          [-56.98028979190452, -21.056141489602602],
          [-56.82648119815452, -20.45000902167834],
          [-56.38702807315452, -20.48088774020802],
          [-55.89264330752952, -20.50147010055191],
          [-55.65094408877952, -20.50147010055191],
          [-55.10162768252952, -19.44829624235093],
          [-54.68414721377952, -18.482045076276716],
          [-54.68414721377952, -17.792981029318906],
          [-54.80499682315452, -17.048736849002278],
          [-54.82696947940452, -16.522828344097242],
          [-55.06866869815452, -16.217140881812828],
          [-55.50812182315452, -15.847575770994556],
          [-56.00250658877952, -15.604348700492018],
          [-56.71661791690452, -15.93210807445483],
          [-57.29889330752952, -15.805296326997492],
          [-57.95807299502952, -15.535558114006925],
          [-58.973632404627836, -15.897400514355134],
          [-59.290155580858844, -16.315729569211467]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var versao_out = '1'
var dirout = 'projects/mapbiomas-workspace/AMOSTRAS/col10/PANTANAL/SAMPLES/mensal/';


var landsat_5col2 = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')
var landsat_7col2 = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2')
var landsat_8col2 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
var landsat_9col2 = ee.ImageCollection('LANDSAT/LC09/C02/T1_L2')

var L5_oldBands = ["SR_B1",  "SR_B2",   "SR_B3", "SR_B4", "SR_B5",   "SR_B7",    "QA_PIXEL"]
var L5_newBands = ["blue",   "green",   "red",   "nir",   "swir1",   "swir2",    "QA_PIXEL"]
var L7_oldBands = ["SR_B1",  "SR_B2",   "SR_B3", "SR_B4", "SR_B5",   "SR_B7",    "QA_PIXEL"]
var L7_newBands = ["blue",   "green",   "red",   "nir",   "swir1",   "swir2",    "QA_PIXEL"]
var L8_oldBands = ["SR_B1",  "SR_B2",  "SR_B3",   "SR_B4", "SR_B5", "SR_B6",   "SR_B7",   "QA_PIXEL"]
var L8_newBands = ["uv",     "blue",   "green",   "red",   "nir",    "swir1",  "swir2",   "QA_PIXEL"]
var L9_oldBands = ["SR_B1",  "SR_B2",  "SR_B3",   "SR_B4", "SR_B5", "SR_B6",   "SR_B7",   "QA_PIXEL"]
var L9_newBands = ["uv",     "blue",   "green",   "red",   "nir",    "swir1",  "swir2",   "QA_PIXEL"]


var L5_nuvem = function (image) {
        // mascara de nuvem
        var cloudShadowBitMask = (1 << 3);
        var cloudsBitMask = (1 << 5);
        var qa = image.select('QA_PIXEL');
        var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0).and(qa.bitwiseAnd(cloudsBitMask).eq(0));
           // mascara de ruidos, saturação radiométrica
              function bitwiseExtract(value, fromBit, toBit) {
                if (toBit === undefined)
                  toBit = fromBit;
                var maskSize = ee.Number(1).add(toBit).subtract(fromBit);
                var mask = ee.Number(1).leftShift(maskSize).subtract(1);
                return value.rightShift(fromBit).bitwiseAnd(mask);
              }
              var clear = bitwiseExtract(qa, 6); // 1 if clear
             // var water = bitwiseExtract(qa, 7); // 1 if water
              var radsatQA = image.select('QA_RADSAT');
              var band5Saturated = bitwiseExtract(radsatQA, 4); // 0 if band 5 is not saturated
              //var anySaturated = bitwiseExtract(radsatQA, 0, 6); // 0 if no bands are saturated
            
              var mask_saturation = clear//.and(anySaturated.not());
              
        return image.updateMask(mask)//.updateMask(mask_saturation)
      }

var L7_nuvem = function (image) {
        var cloudShadowBitMask = (1 << 3);
        var cloudsBitMask = (1 << 5);
        var qa = image.select('QA_PIXEL');
        var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
            .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
      
           // mascara de ruidos, saturação radiométrica
              function bitwiseExtract(value, fromBit, toBit) {
                if (toBit === undefined)
                  toBit = fromBit;
                var maskSize = ee.Number(1).add(toBit).subtract(fromBit);
                var mask = ee.Number(1).leftShift(maskSize).subtract(1);
                return value.rightShift(fromBit).bitwiseAnd(mask);
              }
            
              var clear = bitwiseExtract(qa, 6); // 1 if clear
           //   var water = bitwiseExtract(qa, 7); // 1 if water
            
              var radsatQA = image.select('QA_RADSAT');
              var band5Saturated = bitwiseExtract(radsatQA, 4); // 0 if band 5 is not saturated
              var anySaturated = bitwiseExtract(radsatQA, 0, 6); // 0 if no bands are saturated
            
              var mask_saturation = clear
                //.and(anySaturated.not());

            
        return image.updateMask(mask)//.updateMask(mask_saturation)
 
      }

var L8_nuvem = function (image) {
            var qa = image.select('QA_PIXEL');
                var cloud = qa.bitwiseAnd(1 << 3)
                .and(qa.bitwiseAnd(1 << 9))
                .or(qa.bitwiseAnd(1 << 4));
            
            // If the clear bit (6) is set 
            // or water bit is set (7), then it's a good pixel 
            var good_pixel  = qa.bitwiseAnd(1 << 6)
                .or(qa.bitwiseAnd(1 << 7));
        
          // read radsat 
          var radsatQA = image.select('QA_RADSAT');
          // Is any band saturated? 
          var saturated = radsatQA.bitwiseAnd(1 << 0)
            .or(radsatQA.bitwiseAnd(1 << 1))
              .or(radsatQA.bitwiseAnd(1 << 2))
                .or(radsatQA.bitwiseAnd(1 << 3))
                  .or(radsatQA.bitwiseAnd(1 << 4))
                    .or(radsatQA.bitwiseAnd(1 << 5))
                      .or(radsatQA.bitwiseAnd(1 << 6));
        
          return image.updateMask(cloud.not()).updateMask(good_pixel).updateMask(saturated.not())
      }

var L9_nuvem = function (image) {
            var qa = image.select('QA_PIXEL');
                var cloud = qa.bitwiseAnd(1 << 3)
                .and(qa.bitwiseAnd(1 << 9))
                .or(qa.bitwiseAnd(1 << 4));
            
            // If the clear bit (6) is set 
            // or water bit is set (7), then it's a good pixel 
            var good_pixel  = qa.bitwiseAnd(1 << 6)
                .or(qa.bitwiseAnd(1 << 7));
        
          // read radsat 
          var radsatQA = image.select('QA_RADSAT');
          // Is any band saturated? 
          var saturated = radsatQA.bitwiseAnd(1 << 0)
            .or(radsatQA.bitwiseAnd(1 << 1))
              .or(radsatQA.bitwiseAnd(1 << 2))
                .or(radsatQA.bitwiseAnd(1 << 3))
                  .or(radsatQA.bitwiseAnd(1 << 4))
                    .or(radsatQA.bitwiseAnd(1 << 5))
                      .or(radsatQA.bitwiseAnd(1 << 6));
        
          return image.updateMask(cloud.not()).updateMask(good_pixel).updateMask(saturated.not())
      }

function applyScaleFactorsL5(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  opticalBands = opticalBands.select('SR_B.').multiply(10000).int16();
  return image.addBands(opticalBands, null, true)
  .select(L5_oldBands,L5_newBands)
}
function applyScaleFactorsL7(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  opticalBands = opticalBands.select('SR_B.').multiply(10000).int16();
  return image.addBands(opticalBands, null, true)
  .select(L7_oldBands,L7_newBands)
}
function applyScaleFactorsL8(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  opticalBands = opticalBands.select('SR_B.').multiply(10000).int16();
  return image.addBands(opticalBands, null, true)
  .select(L8_oldBands,L8_newBands)
}
function applyScaleFactorsL9(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  opticalBands = opticalBands.select('SR_B.').multiply(10000).int16();
  return image.addBands(opticalBands, null, true)
  .select(L9_oldBands,L9_newBands)
}

function adicionaindices(image) {
var ndvi = '(b("nir") - b("red") ) / ( b("nir") + b("red") )'
var ndwi = '(b("nir") - b("swir1"))/ ( b("nir") + b("swir1"))'
var nddi = '((((b("nir") - b("red") ) / ( b("nir") + b("red") )) - ((b("nir") - b("swir1"))/ ( b("nir") + b("swir1")))) / (((b("nir") - b("red") ) / ( b("nir") + b("red") )) + ((b("nir") - b("swir1"))/ ( b("nir") + b("swir1")))))';
var evi = '2.5 * (b("nir") - b("red")) / (b("nir") + 6 * b("red") - 7.5 * b("blue") + 1)';
var mndwi = '(b("green") - b("swir1")) / (b("green") + b("swir1"))';
var nmdi = '(b("nir") - (b("swir1") + b("swir2"))) / (b("nir") + (b("swir1") + b("swir2")))'
var lswi = '(b("nir") - b("swir2")) / (b("nir") + b("swir2"))';


var indNDVI = image.expression(ndvi).rename("NDVI").add(1).multiply(1000).int16();
var indNDWI = image.expression(ndwi).rename("NDWI").add(1).multiply(1000).int16();
var indNDDI = image.expression(nddi).rename("NDDI").add(1).multiply(1000).int16();
var indEVI = image.expression(evi).rename("EVI").add(1).multiply(1000).int16();
var indMNDWI = image.expression(mndwi).rename("MNDWI").add(1).multiply(1000).int16();
var indNMDI = image.expression(nmdi).rename("NMDI").add(1).multiply(1000).int16();
var indLSWI = image.expression(lswi).rename("LSWI").add(1).multiply(1000).int16();
  return image.addBands(indNDVI).addBands(indNDWI).addBands(indNDDI).addBands(indEVI).addBands(indMNDWI).addBands(indNMDI).addBands(indLSWI)
}


//var pts_reg1 = ee.FeatureCollection('projects/ee-m272778/assets/mestrado/amostras/samples_stable_r1_v1')


var pts_reg1 = ee.FeatureCollection('projects/mapbiomas-workspace/AMOSTRAS/col10/PANTANAL/SAMPLES/mensal/samples_stable_mensal_r1_v1')


var pontos_estaveis = pts_reg1
//print(pontos_estaveis.size())
pontos_estaveis = pontos_estaveis.filterMetadata('reference','not_equals', 33)
print(pontos_estaveis.size())

var shuffle = function (collection, seed) {
    collection = collection.randomColumn('random', seed || 1)
        .sort('random', true)
        .map(function (feature) {
                var rescaled = ee.Number(feature.get('random')).multiply(1000000000).round();
                return feature.set('new_id', rescaled)});
    var randomIdList = ee.List(collection.reduceColumns(ee.Reducer.toList(), ['new_id']).get('list'));
    var sequentialIdList = ee.List.sequence(1, collection.size());
    var shuffled = collection.remap(randomIdList, sequentialIdList, 'new_id');
    return shuffled;
};



var lista_mes = [
                 ['l5','1985','01'],
                 ['l5','1985','02'],
                 ['l5','1985','06'],
                 ['l5','1985','12'],
                 ['l5','1986','09'],
                 ['l5','1988','04'],
                 ['l5','1990','05'],
                 ['l5','1992','08'],
                 ['l5','1994','07'],
                 ['l5','1995','01'],
                 ['l5','1995','05'],
                 ['l5','1995','09'],
                 ['l5','1998','05'],
                 ['l7','2001','08'],
                 ['l7','2002','03'],
                 ['l5','2007','03'],
                 ['l7','2008','07'],
                 ['l5','2009','09'],
                 ['l7','2011','04'],
                 ['l5','2011','04'],
                 ['l8','2013','04'],
                 ['l8','2013','08'],
                 ['l8','2015','03'],
                 ['l8','2017','03'],
                 ['l8','2017','09'],
                 ['l8','2018','02'],
                 ['l8','2018','07'],
                 ['l8','2020','03'],
                 ['l8','2020','09'],
                 ['l8','2021','02'],
                 ['l8','2021','08'],
                 ['l8','2022','06'],
                 ['l9','2022','06'],
                 ['l9','2022','11'],
                 ['l8','2023','03'],
                 ['l9','2023','05'],
                 ['l8','2024','08'],
                 ['l9','2024','12'],
                ]
//print(lista_mes[0])

var sat = 'l5'
var ano = '2009'
var mes = '09'

for (var i_grupo=0;i_grupo<lista_mes.length; i_grupo++){

  var valor_lista = lista_mes[i_grupo]
  
  var sat = valor_lista[0]
  var ano = valor_lista[1]
  var mes = valor_lista[2]

  var data_ini = ee.Date.fromYMD(parseInt(ano),parseInt(mes),01)
  var data_fim = data_ini.advance(1,'month')
  
  var amostras = shuffle(pontos_estaveis, i_grupo).limit(1000)// limite anterior era 300

 if (sat ==  'l5') {
    var mosaico_mensal = landsat_5col2.filterDate(data_ini,data_fim).filterBounds(geometry)
    var mosaico_mensal_filtrado = mosaico_mensal.map(L5_nuvem).map(applyScaleFactorsL5).map(adicionaindices)
  } else if (sat ==  'l7') {
    var mosaico_mensal = landsat_7col2.filterDate(data_ini,data_fim).filterBounds(geometry)
    var mosaico_mensal_filtrado = mosaico_mensal.map(L7_nuvem).map(applyScaleFactorsL7).map(adicionaindices)
  }else if (sat ==  'l8') {
    var mosaico_mensal = landsat_8col2.filterDate(data_ini,data_fim).filterBounds(geometry)
    var mosaico_mensal_filtrado = mosaico_mensal.map(L8_nuvem).map(applyScaleFactorsL8).map(adicionaindices)
  }
  else if (sat ==  'l9') {
    var mosaico_mensal = landsat_9col2.filterDate(data_ini,data_fim).filterBounds(geometry)
    var mosaico_mensal_filtrado = mosaico_mensal.map(L9_nuvem).map(applyScaleFactorsL9).map(adicionaindices)
  }
  
  var amostraTotalimg = amostras.reduceToImage({properties: ['reference'],reducer: ee.Reducer.first()}).select([0],['reference'])
  var train_samples = mosaico_mensal_filtrado.median().addBands(amostraTotalimg).sampleRegions({'collection': amostras, 'scale': 30, 'geometries': true})
  if (i_grupo == 0) { var amostras_finais = train_samples
  } else {amostras_finais = amostras_finais.merge(train_samples)
  }
}


print('n° amostras finais',amostras_finais.size()) 
print(amostras_finais.limit(10))
//Map.addLayer(amostras_finais.filterMetadata('reference','equals',3),{'color': '027b1a'},'flor')
//Map.addLayer(amostras_finais.filterMetadata('reference','equals',12),{'color': 'bba83c'},'camp')
//Map.addLayer(amostras_finais.filterMetadata('reference','equals',4),{'color': '03ff35'},'sav')
//Map.addLayer(amostras_finais.filterMetadata('reference','equals',21),{'color': 'f4ff78'},'agr')


//print('flor', amostras_finais.filterMetadata('reference','equals',3).size())
//print('camp', amostras_finais.filterMetadata('reference','equals',12).size())
//print('sav', amostras_finais.filterMetadata('reference','equals',4).size())
//print('agr', amostras_finais.filterMetadata('reference','equals',21).size())

Export.table.toAsset(amostras_finais, 'pontos_estaveis_v'+versao_out+'_pantanal_mensal', dirout + 'pontos_estaveis_treinados_v'+versao_out+'_pantanal_mensal');  

